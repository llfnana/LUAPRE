---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2019/10/23 16:09
---
--TODO
--对象speed：UnScaledTime * objSpeed * battleSpeed * GameSpeed
--对象暂停： 调整对象speed
--游戏暂停：GameSpeed
--TimeLine暂停：

---@class LTimerManager @计时器管理器
---@field public currentBattleSpeed number @当前战倍速
---@field public bossBattleSpeed number @Boss战倍速
---@field public timeScale number @时间缩放倍数
LTimerManager = {
    currentBattleSpeed = 1,
    bossBattleSpeed = 1,
    timeScale = 1
}

--计时器集合
local timers = {}

--初始化
function LTimerManager.Init()
    LTimerManager.bossBattleSpeed = PlayerPrefs.GetFloat("bossBattleSpeed", 1)
    LTimerManager.SetTimeScale(1)
end

--添加计时器
--timer：计时器
function LTimerManager.AddTimer(timer)
    for i, v in ipairs(timers) do
        if v == timer then
            return false
        end
    end
    table.insert(timers, timer)
    return true
end

--移除计时器
--timer：计时器
function LTimerManager.RemoveTimer(timer)
    for i, v in ipairs(timers) do
        if v == timer then
            table.remove(timers, i)
            return true
        end
    end
    return false
end

---@type fun(battleSpeed:number, isBoss:boolean) @战斗时设置时间缩放
---@param battleSpeed number @战斗时设置的倍速
---@param isBoss boolean @是否是Boss战
function LTimerManager.SetBattleSpeed(battleSpeed, isBoss)
    if isBoss then
        LTimerManager.SetBossBattleSpeed(battleSpeed)
        --退出Boss战后修改战斗时间只能修改Boss的，不能影响普通战斗的
        -- if not SceneSystem.currentSceneSystem:IsBattleEndImmediately() then
        --     return
        -- end
    end
    if LTimerManager.currentBattleSpeed == battleSpeed then
        return
    end
    LTimerManager.currentBattleSpeed = battleSpeed
    LTimerManager.SetTimeScale(battleSpeed)
end

---@type fun(bossBattleSpeed:number) @设置Boss战战斗倍速
---@param bossBattleSpeed number @Boss战战斗倍速
function LTimerManager.SetBossBattleSpeed(bossBattleSpeed)
    if LTimerManager.bossBattleSpeed ~= bossBattleSpeed then
        LTimerManager.bossBattleSpeed = bossBattleSpeed
        PlayerPrefs.SetFloat("bossBattleSpeed", bossBattleSpeed)
    end
end

---@type fun():number @获取战斗时间倍速
---@return number @返回当前战斗时间倍速，如果是Boss战返回Boss战倍速, 否则返回1
function LTimerManager.GetBattleSpeed()
    if SceneEntity.IsBossBattle() then
        return LTimerManager.bossBattleSpeed
    end
    return 1
end

---@type fun():number @获取当前战斗时间倍速
---@return number @返回当前战斗时间倍速
function LTimerManager.GetCurrentBattleSpeed()
    return LTimerManager.battleSpeed
end

--设置时间缩放倍数
--timeScale：缩放倍数
--entityID：缩放者
function LTimerManager.SetTimeScale(timeScale)
    if LTimerManager.timeScale == timeScale then
        return
    end
    LTimerManager.timeScale = timeScale
    Time:SetTimeScale(timeScale)
    EngineAPI.SetTimeScale(timeScale)
    for i, v in ipairs(timers) do
        v:ExecuteEvent(LTimerEvent.SetSpeedOrTimeScale)
    end
end

--恢复时间缩放
function LTimerManager.ResumeTimeScale()
    local oldTime = LTimerManager.GetBattleSpeed()
    LTimerManager.SetTimeScale(oldTime)
end

--获取实体时间缩放系数
--entityID：实体ID
function LTimerManager.GetEntityTimeScale(entityID)
    return 1
end

--获取实体是否被时间缩放
--entityID：实体ID
function LTimerManager.IsEntityTimeScale(entityID)
    return true
end

--获取实体帧迭代时间  根据技能获取时间
--entityID：实体ID
function LTimerManager.GetEntityTimeDeltaTime(entityID)
    -- local CasterEntity = ECSEntity.Get(entityID)
    -- local targetBuffComp = CasterEntity:GetComponent(BuffComponent)
    -- if targetBuffComp then
    --     local isHaveJZ = targetBuffComp:IsHaveBuff("静止")
    --     if isHaveJZ then
    --         return 0
    --     end
    -- end
    -- local SkillResponse = CasterEntity:GetComponent(SkillResponseComponent)
    -- if SkillResponse and SkillResponse.skillItem ~= nil then
    --     if SkillResponse.skillItem.skill.skill_id ~= 100308 then
    --         local attackSpeed = 0
    --         if targetBuffComp then
    --             attackSpeed =targetBuffComp:GetTotalRolePropertiesComponent(18)/10000
    --         end
    --         attackSpeed = attackSpeed + 1
    --         if attackSpeed <= 0 then
    --             attackSpeed = 0
    --         end
    --         return TimerFunction.deltaTime * attackSpeed
    --     else
    --         return TimerFunction.deltaTime
    --     end
    -- else
    --     return TimerFunction.deltaTime
    -- end
end

--更新
function LTimerManager.Update()
    for i, v in ipairs(timers) do
        if v:CanUpdate() then
            if v.useTimeScale then
                v:Update(TimerFunction.battledeltaTime)
            else
                v:Update(Time.unscaledDeltaTime)
            end
        end
    end
end
